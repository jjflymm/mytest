5-1 条件测试 ：编写一系列条件测试；将每个测试以及你对其结果的预测和实际结果都打印出来。你编写的代码应类似于下面这样：
car = 'subaru'
print("Is car == 'subaru'? I predict True.")
print(car == 'subaru')
　
print("\nIs car == 'audi'? I predict False.")
print(car == 'audi')
详细研究实际结果，直到你明白了它为何为True 或False 。
创建至少10个测试，且其中结果分别为True 和False 的测试都至少有5个。
man = 'women'
print('Is this guy is women? I think right')
print(man == 'women')
print('Is this guy is boy? I think not')
print(man == 'boy')

5-2 更多的条件测试 ：你并非只能创建10个测试。如果你想尝试做更多的比较，可再编写一些测试，并将它们加入到conditional_tests.py中。对于下面列出的各种测
试，至少编写一个结果为True 和False 的测试。
检查两个字符串相等和不等。
使用函数lower() 的测试。
检查两个数字相等、不等、大于、小于、大于等于和小于等于。
使用关键字and 和or 的测试。
测试特定的值是否包含在列表中。
测试特定的值是否未包含在列表中。
a = 'abc'
b = 'bcd'
print(a == b)
print(a.lower() == b.lower())
print(5 == 6)
print(5==6 and 5==5)
print(5==6 or 5==5)
print('a' in a)
print('a' not in a)

5-3 外星人颜色#1 ：假设在游戏中刚射杀了一个外星人，请创建一个名为alien_color 的变量，并将其设置为'green' 、'yellow' 或'red' 。
编写一条if 语句，检查外星人是否是绿色的；如果是，就打印一条消息，指出玩家获得了5个点。
编写这个程序的两个版本，在一个版本中上述测试通过了，而在另一个版本中未通过（未通过测试时没有输出）。
alien_color = 'green'
if alien_color is 'green':
    print('you get 5 point')

alien_color = 'yellow'
if alien_color is 'green':
    print('you get 5 point')
    
5-4 外星人颜色#2 ：像练习5-3那样设置外星人的颜色，并编写一个if-else 结构。
如果外星人是绿色的，就打印一条消息，指出玩家因射杀该外星人获得了5个点。
如果外星人不是绿色的，就打印一条消息，指出玩家获得了10个点。
编写这个程序的两个版本，在一个版本中执行if 代码块，而在另一个版本中执行else 代码块。
alien_color = 'green'
if alien_color is 'green':
    print('you get 5 point')
else: print('you get 10 point')

alien_color = 'yellow'
if alien_color is 'green':
    print('you get 5 point')
else: print('you get 10 point')

5-5 外星人颜色#3 ：将练习5-4中的if-else 结构改为if-elif-else 结构。
如果外星人是绿色的，就打印一条消息，指出玩家获得了5个点。
如果外星人是黄色的，就打印一条消息，指出玩家获得了10个点。
如果外星人是红色的，就打印一条消息，指出玩家获得了15个点。
编写这个程序的三个版本，它们分别在外星人为绿色、黄色和红色时打印一条消息。
alien_color = 'green'
if alien_color is 'green':
    print('you get 5 point')
elif alien_color is 'yellow': print('you get 10 point')
elif alien_color is 'red': print('you get 15 point')
alien_color = 'yellow'
if alien_color is 'green':
    print('you get 5 point')
elif alien_color is 'yellow': print('you get 10 point')
elif alien_color is 'red': print('you get 15 point')
alien_color = 'red'
if alien_color is 'green':
    print('you get 5 point')
elif alien_color is 'yellow': print('you get 10 point')
elif alien_color is 'red': print('you get 15 point')

5-6 人生的不同阶段 ：设置变量age 的值，再编写一个if-elif-else 结构，根据age 的值判断处于人生的哪个阶段。
如果一个人的年龄小于2岁，就打印一条消息，指出他是婴儿。
如果一个人的年龄为2（含）～4岁，就打印一条消息，指出他正蹒跚学步。
如果一个人的年龄为4（含）～13岁，就打印一条消息，指出他是儿童。
如果一个人的年龄为13（含）～20岁，就打印一条消息，指出他是青少年。
如果一个人的年龄为20（含）～65岁，就打印一条消息，指出他是成年人。
如果一个人的年龄超过65（含）岁，就打印一条消息，指出他是老年人。
age = 18
if age < 2:
    print('a baby')
elif age>=2 and age<4: print('Toddler')
elif age>=4 and age<13: print('a children')
elif age>=13 and age<20: print('teen')
elif age>=20 and age<65:print('adult')
else: print('old people')

5-7 喜欢的水果 ：创建一个列表，其中包含你喜欢的水果，再编写一系列独立的if 语句，检查列表中是否包含特定的水果。
将该列表命名为favorite_fruits ，并在其中包含三种水果。
编写5条if 语句，每条都检查某种水果是否包含在列表中，如果包含在列表中，就打印一条消息，如“You really like bananas!”。
favorite_fruits = ['apple', 'lemon', 'tomato']
if 'apple' in favorite_fruits:
    print('you really like apple')
if 'lemon' in favorite_fruits:
    print('you like lemon')
if 'tomato' in favorite_fruits:
    print('you like tomato')
if 'cha' in favorite_fruits:
    print('you like cha')
if 'ma' in favorite_fruits:
    print('you like ma')

5-8 以特殊方式跟管理员打招呼 ：创建一个至少包含5个用户名的列表，且其中一个用户名为'admin' 。想象你要编写代码，在每位用户登录网站后都打印一条问
候消息。遍历用户名列表，并向每位用户打印一条问候消息。
如果用户名为'admin' ，就打印一条特殊的问候消息，如“Hello admin, would you like to see a status report?”。
否则，打印一条普通的问候消息，如“Hello Eric, thank you for logging in again”。
names = ['admin', 'jian', 'min', 'xxx', 'ti']

for name in names:
    if name == 'admin':
        print('hello admin, would you like me？')
    else: print('hello '+name+'thank you for logging in again')

5-9 处理没有用户的情形 ：在为完成练习5-8编写的程序中，添加一条if 语句，检查用户名列表是否为空。
如果为空，就打印消息“We need to find some users!”。
删除列表中的所有用户名，确定将打印正确的消息。
names = []
if names == []:
    print('we need to find some users')
else:
    for name in names:
        if name == 'admin':
            print('hello admin, would you like me？')
        else: print('hello '+name+'thank you for logging in again')

5-10 检查用户名 ：按下面的说明编写一个程序，模拟网站确保每位用户的用户名都独一无二的方式。
创建一个至少包含5个用户名的列表，并将其命名为current_users 。
再创建一个包含5个用户名的列表，将其命名为new_users ，并确保其中有一两个用户名也包含在列表current_users 中。
遍历列表new_users ，对于其中的每个用户名，都检查它是否已被使用。如果是这样，就打印一条消息，指出需要输入别的用户名；否则，打印一条消息，指
出这个用户名未被使用。
确保比较时不区分大消息；换句话说，如果用户名'John' 已被使用，应拒绝用户名'JOHN' 。
current_users = ['xioming', 'xxx', 'sss', 'use', 'asd']
new_users = ['xioming', 'xxx', 'aaa', 'bbb', 'ccc']
for new_user in new_users:
    if new_user.lower() in current_users:
        print('please enter other name:')
    else: print('this name can be used')

5-11 序数 ：序数表示位置，如1st和2nd。大多数序数都以th结尾，只有1、2和3例外。
在一个列表中存储数字1~9。
遍历这个列表。
在循环中使用一个if-elif-else 结构，以打印每个数字对应的序数。输出内容应为1st 、2nd 、3rd 、4th 、5th 、6th 、7th 、8th 和9th ，但每个序
数都独占一行。
lists = list(range(1,10))
for i in lists:
    if i == 1:
        print('1st')
    elif i == 2:
        print('2nd')
    elif i == 3:
        print('3rd')
    elif i == 4:
        print('4th')
    elif i == 5:
        print('5th')
    elif i == 6:
        print('6th')
    elif i == 7:
        print('7th')
    elif i == 8:
        print('8th')
    elif i == 9:
        print('9th')
5-12 设置if 语句的格式 ：审核你在本章编写的程序，确保正确地设置了条件测试的格式。

5-13 自己的想法 ：与刚拿起本书时相比，现在你是一名能力更强的程序员了。鉴于你对如何在程序中模拟现实情形有了更深入的认识，你可以考虑使用程序来解决一
些问题。随着编程技能不断提高，你可能想解决一些问题，请将这方面的想法记录下来。想想你可能想编写的游戏、想研究的数据集以及想创建的Web应用程序。
